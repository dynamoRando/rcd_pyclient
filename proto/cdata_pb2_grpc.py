# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import cdata_pb2 as cdata__pb2


class SQLClientStub(object):
    """a service for passing cooperative SQL statements to a rcd instance
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.IsOnline = channel.unary_unary(
                '/cdata.SQLClient/IsOnline',
                request_serializer=cdata__pb2.TestRequest.SerializeToString,
                response_deserializer=cdata__pb2.TestReply.FromString,
                )
        self.CreateUserDatabase = channel.unary_unary(
                '/cdata.SQLClient/CreateUserDatabase',
                request_serializer=cdata__pb2.CreateUserDatabaseRequest.SerializeToString,
                response_deserializer=cdata__pb2.CreateUserDatabaseReply.FromString,
                )
        self.EnableCoooperativeFeatures = channel.unary_unary(
                '/cdata.SQLClient/EnableCoooperativeFeatures',
                request_serializer=cdata__pb2.EnableCoooperativeFeaturesRequest.SerializeToString,
                response_deserializer=cdata__pb2.EnableCoooperativeFeaturesReply.FromString,
                )
        self.ExecuteRead = channel.unary_unary(
                '/cdata.SQLClient/ExecuteRead',
                request_serializer=cdata__pb2.ExecuteReadRequest.SerializeToString,
                response_deserializer=cdata__pb2.ExecuteReadReply.FromString,
                )
        self.ExecuteCooperativeRead = channel.unary_unary(
                '/cdata.SQLClient/ExecuteCooperativeRead',
                request_serializer=cdata__pb2.ExecuteCooperativeReadRequest.SerializeToString,
                response_deserializer=cdata__pb2.ExecuteCooperativeReadReply.FromString,
                )
        self.ExecuteWrite = channel.unary_unary(
                '/cdata.SQLClient/ExecuteWrite',
                request_serializer=cdata__pb2.ExecuteWriteRequest.SerializeToString,
                response_deserializer=cdata__pb2.ExecuteWriteReply.FromString,
                )
        self.ExecuteCooperativeWrite = channel.unary_unary(
                '/cdata.SQLClient/ExecuteCooperativeWrite',
                request_serializer=cdata__pb2.ExecuteCooperativeWriteRequest.SerializeToString,
                response_deserializer=cdata__pb2.ExecuteCooperativeWriteReply.FromString,
                )
        self.HasTable = channel.unary_unary(
                '/cdata.SQLClient/HasTable',
                request_serializer=cdata__pb2.HasTableRequest.SerializeToString,
                response_deserializer=cdata__pb2.HasTableReply.FromString,
                )
        self.SetLogicalStoragePolicy = channel.unary_unary(
                '/cdata.SQLClient/SetLogicalStoragePolicy',
                request_serializer=cdata__pb2.SetLogicalStoragePolicyRequest.SerializeToString,
                response_deserializer=cdata__pb2.SetLogicalStoragePolicyReply.FromString,
                )
        self.GetLogicalStoragePolicy = channel.unary_unary(
                '/cdata.SQLClient/GetLogicalStoragePolicy',
                request_serializer=cdata__pb2.GetLogicalStoragePolicyRequest.SerializeToString,
                response_deserializer=cdata__pb2.GetLogicalStoragePolicyReply.FromString,
                )
        self.GenerateContract = channel.unary_unary(
                '/cdata.SQLClient/GenerateContract',
                request_serializer=cdata__pb2.GenerateContractRequest.SerializeToString,
                response_deserializer=cdata__pb2.GenerateContractReply.FromString,
                )
        self.AddParticipant = channel.unary_unary(
                '/cdata.SQLClient/AddParticipant',
                request_serializer=cdata__pb2.AddParticipantRequest.SerializeToString,
                response_deserializer=cdata__pb2.AddParticipantReply.FromString,
                )
        self.SendParticipantContract = channel.unary_unary(
                '/cdata.SQLClient/SendParticipantContract',
                request_serializer=cdata__pb2.SendParticipantContractRequest.SerializeToString,
                response_deserializer=cdata__pb2.SendParticipantContractReply.FromString,
                )
        self.ReviewPendingContracts = channel.unary_unary(
                '/cdata.SQLClient/ReviewPendingContracts',
                request_serializer=cdata__pb2.ViewPendingContractsRequest.SerializeToString,
                response_deserializer=cdata__pb2.ViewPendingContractsReply.FromString,
                )
        self.AcceptPendingContract = channel.unary_unary(
                '/cdata.SQLClient/AcceptPendingContract',
                request_serializer=cdata__pb2.AcceptPendingContractRequest.SerializeToString,
                response_deserializer=cdata__pb2.AcceptPendingContractReply.FromString,
                )
        self.RejectPendingContract = channel.unary_unary(
                '/cdata.SQLClient/RejectPendingContract',
                request_serializer=cdata__pb2.RejectPendingContractRequest.SerializeToString,
                response_deserializer=cdata__pb2.RejectPendingContractReply.FromString,
                )


class SQLClientServicer(object):
    """a service for passing cooperative SQL statements to a rcd instance
    """

    def IsOnline(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateUserDatabase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnableCoooperativeFeatures(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteCooperativeRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteWrite(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteCooperativeWrite(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HasTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetLogicalStoragePolicy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLogicalStoragePolicy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateContract(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddParticipant(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendParticipantContract(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReviewPendingContracts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcceptPendingContract(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RejectPendingContract(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SQLClientServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'IsOnline': grpc.unary_unary_rpc_method_handler(
                    servicer.IsOnline,
                    request_deserializer=cdata__pb2.TestRequest.FromString,
                    response_serializer=cdata__pb2.TestReply.SerializeToString,
            ),
            'CreateUserDatabase': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUserDatabase,
                    request_deserializer=cdata__pb2.CreateUserDatabaseRequest.FromString,
                    response_serializer=cdata__pb2.CreateUserDatabaseReply.SerializeToString,
            ),
            'EnableCoooperativeFeatures': grpc.unary_unary_rpc_method_handler(
                    servicer.EnableCoooperativeFeatures,
                    request_deserializer=cdata__pb2.EnableCoooperativeFeaturesRequest.FromString,
                    response_serializer=cdata__pb2.EnableCoooperativeFeaturesReply.SerializeToString,
            ),
            'ExecuteRead': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteRead,
                    request_deserializer=cdata__pb2.ExecuteReadRequest.FromString,
                    response_serializer=cdata__pb2.ExecuteReadReply.SerializeToString,
            ),
            'ExecuteCooperativeRead': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteCooperativeRead,
                    request_deserializer=cdata__pb2.ExecuteCooperativeReadRequest.FromString,
                    response_serializer=cdata__pb2.ExecuteCooperativeReadReply.SerializeToString,
            ),
            'ExecuteWrite': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteWrite,
                    request_deserializer=cdata__pb2.ExecuteWriteRequest.FromString,
                    response_serializer=cdata__pb2.ExecuteWriteReply.SerializeToString,
            ),
            'ExecuteCooperativeWrite': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteCooperativeWrite,
                    request_deserializer=cdata__pb2.ExecuteCooperativeWriteRequest.FromString,
                    response_serializer=cdata__pb2.ExecuteCooperativeWriteReply.SerializeToString,
            ),
            'HasTable': grpc.unary_unary_rpc_method_handler(
                    servicer.HasTable,
                    request_deserializer=cdata__pb2.HasTableRequest.FromString,
                    response_serializer=cdata__pb2.HasTableReply.SerializeToString,
            ),
            'SetLogicalStoragePolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.SetLogicalStoragePolicy,
                    request_deserializer=cdata__pb2.SetLogicalStoragePolicyRequest.FromString,
                    response_serializer=cdata__pb2.SetLogicalStoragePolicyReply.SerializeToString,
            ),
            'GetLogicalStoragePolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLogicalStoragePolicy,
                    request_deserializer=cdata__pb2.GetLogicalStoragePolicyRequest.FromString,
                    response_serializer=cdata__pb2.GetLogicalStoragePolicyReply.SerializeToString,
            ),
            'GenerateContract': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateContract,
                    request_deserializer=cdata__pb2.GenerateContractRequest.FromString,
                    response_serializer=cdata__pb2.GenerateContractReply.SerializeToString,
            ),
            'AddParticipant': grpc.unary_unary_rpc_method_handler(
                    servicer.AddParticipant,
                    request_deserializer=cdata__pb2.AddParticipantRequest.FromString,
                    response_serializer=cdata__pb2.AddParticipantReply.SerializeToString,
            ),
            'SendParticipantContract': grpc.unary_unary_rpc_method_handler(
                    servicer.SendParticipantContract,
                    request_deserializer=cdata__pb2.SendParticipantContractRequest.FromString,
                    response_serializer=cdata__pb2.SendParticipantContractReply.SerializeToString,
            ),
            'ReviewPendingContracts': grpc.unary_unary_rpc_method_handler(
                    servicer.ReviewPendingContracts,
                    request_deserializer=cdata__pb2.ViewPendingContractsRequest.FromString,
                    response_serializer=cdata__pb2.ViewPendingContractsReply.SerializeToString,
            ),
            'AcceptPendingContract': grpc.unary_unary_rpc_method_handler(
                    servicer.AcceptPendingContract,
                    request_deserializer=cdata__pb2.AcceptPendingContractRequest.FromString,
                    response_serializer=cdata__pb2.AcceptPendingContractReply.SerializeToString,
            ),
            'RejectPendingContract': grpc.unary_unary_rpc_method_handler(
                    servicer.RejectPendingContract,
                    request_deserializer=cdata__pb2.RejectPendingContractRequest.FromString,
                    response_serializer=cdata__pb2.RejectPendingContractReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cdata.SQLClient', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SQLClient(object):
    """a service for passing cooperative SQL statements to a rcd instance
    """

    @staticmethod
    def IsOnline(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdata.SQLClient/IsOnline',
            cdata__pb2.TestRequest.SerializeToString,
            cdata__pb2.TestReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateUserDatabase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdata.SQLClient/CreateUserDatabase',
            cdata__pb2.CreateUserDatabaseRequest.SerializeToString,
            cdata__pb2.CreateUserDatabaseReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnableCoooperativeFeatures(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdata.SQLClient/EnableCoooperativeFeatures',
            cdata__pb2.EnableCoooperativeFeaturesRequest.SerializeToString,
            cdata__pb2.EnableCoooperativeFeaturesReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdata.SQLClient/ExecuteRead',
            cdata__pb2.ExecuteReadRequest.SerializeToString,
            cdata__pb2.ExecuteReadReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteCooperativeRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdata.SQLClient/ExecuteCooperativeRead',
            cdata__pb2.ExecuteCooperativeReadRequest.SerializeToString,
            cdata__pb2.ExecuteCooperativeReadReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteWrite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdata.SQLClient/ExecuteWrite',
            cdata__pb2.ExecuteWriteRequest.SerializeToString,
            cdata__pb2.ExecuteWriteReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteCooperativeWrite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdata.SQLClient/ExecuteCooperativeWrite',
            cdata__pb2.ExecuteCooperativeWriteRequest.SerializeToString,
            cdata__pb2.ExecuteCooperativeWriteReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HasTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdata.SQLClient/HasTable',
            cdata__pb2.HasTableRequest.SerializeToString,
            cdata__pb2.HasTableReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetLogicalStoragePolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdata.SQLClient/SetLogicalStoragePolicy',
            cdata__pb2.SetLogicalStoragePolicyRequest.SerializeToString,
            cdata__pb2.SetLogicalStoragePolicyReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLogicalStoragePolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdata.SQLClient/GetLogicalStoragePolicy',
            cdata__pb2.GetLogicalStoragePolicyRequest.SerializeToString,
            cdata__pb2.GetLogicalStoragePolicyReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateContract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdata.SQLClient/GenerateContract',
            cdata__pb2.GenerateContractRequest.SerializeToString,
            cdata__pb2.GenerateContractReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddParticipant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdata.SQLClient/AddParticipant',
            cdata__pb2.AddParticipantRequest.SerializeToString,
            cdata__pb2.AddParticipantReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendParticipantContract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdata.SQLClient/SendParticipantContract',
            cdata__pb2.SendParticipantContractRequest.SerializeToString,
            cdata__pb2.SendParticipantContractReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReviewPendingContracts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdata.SQLClient/ReviewPendingContracts',
            cdata__pb2.ViewPendingContractsRequest.SerializeToString,
            cdata__pb2.ViewPendingContractsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AcceptPendingContract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdata.SQLClient/AcceptPendingContract',
            cdata__pb2.AcceptPendingContractRequest.SerializeToString,
            cdata__pb2.AcceptPendingContractReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RejectPendingContract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdata.SQLClient/RejectPendingContract',
            cdata__pb2.RejectPendingContractRequest.SerializeToString,
            cdata__pb2.RejectPendingContractReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class DataServiceStub(object):
    """a service for communication between different rcd stores
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.IsOnline = channel.unary_unary(
                '/cdata.DataService/IsOnline',
                request_serializer=cdata__pb2.TestRequest.SerializeToString,
                response_deserializer=cdata__pb2.TestReply.FromString,
                )
        self.CreatePartialDatabase = channel.unary_unary(
                '/cdata.DataService/CreatePartialDatabase',
                request_serializer=cdata__pb2.CreateDatabaseRequest.SerializeToString,
                response_deserializer=cdata__pb2.CreateDatabaseResult.FromString,
                )
        self.CreateTableInDatabase = channel.unary_unary(
                '/cdata.DataService/CreateTableInDatabase',
                request_serializer=cdata__pb2.CreateTableRequest.SerializeToString,
                response_deserializer=cdata__pb2.CreateTableResult.FromString,
                )
        self.InsertRowIntoTable = channel.unary_unary(
                '/cdata.DataService/InsertRowIntoTable',
                request_serializer=cdata__pb2.InsertRowRequest.SerializeToString,
                response_deserializer=cdata__pb2.InsertRowResult.FromString,
                )
        self.UpdateRowInTable = channel.unary_unary(
                '/cdata.DataService/UpdateRowInTable',
                request_serializer=cdata__pb2.UpdateRowInTableRequest.SerializeToString,
                response_deserializer=cdata__pb2.UpdateRowInTableResult.FromString,
                )
        self.GetRowsFromTable = channel.unary_unary(
                '/cdata.DataService/GetRowsFromTable',
                request_serializer=cdata__pb2.GetRowsFromTableRequest.SerializeToString,
                response_deserializer=cdata__pb2.GetRowsFromTableResult.FromString,
                )
        self.GetRowFromPartialDatabase = channel.unary_unary(
                '/cdata.DataService/GetRowFromPartialDatabase',
                request_serializer=cdata__pb2.GetRowFromPartialDatabaseRequest.SerializeToString,
                response_deserializer=cdata__pb2.GetRowFromPartialDatabaseResult.FromString,
                )
        self.SaveContract = channel.unary_unary(
                '/cdata.DataService/SaveContract',
                request_serializer=cdata__pb2.SaveContractRequest.SerializeToString,
                response_deserializer=cdata__pb2.SaveContractResult.FromString,
                )
        self.AcceptContract = channel.unary_unary(
                '/cdata.DataService/AcceptContract',
                request_serializer=cdata__pb2.ParticipantAcceptsContractRequest.SerializeToString,
                response_deserializer=cdata__pb2.ParticipantAcceptsContractResult.FromString,
                )
        self.RemoveRowFromPartialDatabase = channel.unary_unary(
                '/cdata.DataService/RemoveRowFromPartialDatabase',
                request_serializer=cdata__pb2.RemoveRowFromPartialDatabaseRequest.SerializeToString,
                response_deserializer=cdata__pb2.RemoveRowFromPartialDatabaseResult.FromString,
                )
        self.UpdateRowDataHashForHost = channel.unary_unary(
                '/cdata.DataService/UpdateRowDataHashForHost',
                request_serializer=cdata__pb2.UpdateRowDataHashForHostRequest.SerializeToString,
                response_deserializer=cdata__pb2.UpdateRowDataHashForHostResponse.FromString,
                )
        self.NotifyHostOfRemovedRow = channel.unary_unary(
                '/cdata.DataService/NotifyHostOfRemovedRow',
                request_serializer=cdata__pb2.NotifyHostOfRemovedRowRequest.SerializeToString,
                response_deserializer=cdata__pb2.NotifyHostOfRemovedRowResponse.FromString,
                )


class DataServiceServicer(object):
    """a service for communication between different rcd stores
    """

    def IsOnline(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePartialDatabase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTableInDatabase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsertRowIntoTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRowInTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRowsFromTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRowFromPartialDatabase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveContract(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcceptContract(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveRowFromPartialDatabase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRowDataHashForHost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyHostOfRemovedRow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'IsOnline': grpc.unary_unary_rpc_method_handler(
                    servicer.IsOnline,
                    request_deserializer=cdata__pb2.TestRequest.FromString,
                    response_serializer=cdata__pb2.TestReply.SerializeToString,
            ),
            'CreatePartialDatabase': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePartialDatabase,
                    request_deserializer=cdata__pb2.CreateDatabaseRequest.FromString,
                    response_serializer=cdata__pb2.CreateDatabaseResult.SerializeToString,
            ),
            'CreateTableInDatabase': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTableInDatabase,
                    request_deserializer=cdata__pb2.CreateTableRequest.FromString,
                    response_serializer=cdata__pb2.CreateTableResult.SerializeToString,
            ),
            'InsertRowIntoTable': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertRowIntoTable,
                    request_deserializer=cdata__pb2.InsertRowRequest.FromString,
                    response_serializer=cdata__pb2.InsertRowResult.SerializeToString,
            ),
            'UpdateRowInTable': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRowInTable,
                    request_deserializer=cdata__pb2.UpdateRowInTableRequest.FromString,
                    response_serializer=cdata__pb2.UpdateRowInTableResult.SerializeToString,
            ),
            'GetRowsFromTable': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRowsFromTable,
                    request_deserializer=cdata__pb2.GetRowsFromTableRequest.FromString,
                    response_serializer=cdata__pb2.GetRowsFromTableResult.SerializeToString,
            ),
            'GetRowFromPartialDatabase': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRowFromPartialDatabase,
                    request_deserializer=cdata__pb2.GetRowFromPartialDatabaseRequest.FromString,
                    response_serializer=cdata__pb2.GetRowFromPartialDatabaseResult.SerializeToString,
            ),
            'SaveContract': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveContract,
                    request_deserializer=cdata__pb2.SaveContractRequest.FromString,
                    response_serializer=cdata__pb2.SaveContractResult.SerializeToString,
            ),
            'AcceptContract': grpc.unary_unary_rpc_method_handler(
                    servicer.AcceptContract,
                    request_deserializer=cdata__pb2.ParticipantAcceptsContractRequest.FromString,
                    response_serializer=cdata__pb2.ParticipantAcceptsContractResult.SerializeToString,
            ),
            'RemoveRowFromPartialDatabase': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveRowFromPartialDatabase,
                    request_deserializer=cdata__pb2.RemoveRowFromPartialDatabaseRequest.FromString,
                    response_serializer=cdata__pb2.RemoveRowFromPartialDatabaseResult.SerializeToString,
            ),
            'UpdateRowDataHashForHost': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRowDataHashForHost,
                    request_deserializer=cdata__pb2.UpdateRowDataHashForHostRequest.FromString,
                    response_serializer=cdata__pb2.UpdateRowDataHashForHostResponse.SerializeToString,
            ),
            'NotifyHostOfRemovedRow': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyHostOfRemovedRow,
                    request_deserializer=cdata__pb2.NotifyHostOfRemovedRowRequest.FromString,
                    response_serializer=cdata__pb2.NotifyHostOfRemovedRowResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cdata.DataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataService(object):
    """a service for communication between different rcd stores
    """

    @staticmethod
    def IsOnline(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdata.DataService/IsOnline',
            cdata__pb2.TestRequest.SerializeToString,
            cdata__pb2.TestReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreatePartialDatabase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdata.DataService/CreatePartialDatabase',
            cdata__pb2.CreateDatabaseRequest.SerializeToString,
            cdata__pb2.CreateDatabaseResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTableInDatabase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdata.DataService/CreateTableInDatabase',
            cdata__pb2.CreateTableRequest.SerializeToString,
            cdata__pb2.CreateTableResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InsertRowIntoTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdata.DataService/InsertRowIntoTable',
            cdata__pb2.InsertRowRequest.SerializeToString,
            cdata__pb2.InsertRowResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateRowInTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdata.DataService/UpdateRowInTable',
            cdata__pb2.UpdateRowInTableRequest.SerializeToString,
            cdata__pb2.UpdateRowInTableResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRowsFromTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdata.DataService/GetRowsFromTable',
            cdata__pb2.GetRowsFromTableRequest.SerializeToString,
            cdata__pb2.GetRowsFromTableResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRowFromPartialDatabase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdata.DataService/GetRowFromPartialDatabase',
            cdata__pb2.GetRowFromPartialDatabaseRequest.SerializeToString,
            cdata__pb2.GetRowFromPartialDatabaseResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SaveContract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdata.DataService/SaveContract',
            cdata__pb2.SaveContractRequest.SerializeToString,
            cdata__pb2.SaveContractResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AcceptContract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdata.DataService/AcceptContract',
            cdata__pb2.ParticipantAcceptsContractRequest.SerializeToString,
            cdata__pb2.ParticipantAcceptsContractResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveRowFromPartialDatabase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdata.DataService/RemoveRowFromPartialDatabase',
            cdata__pb2.RemoveRowFromPartialDatabaseRequest.SerializeToString,
            cdata__pb2.RemoveRowFromPartialDatabaseResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateRowDataHashForHost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdata.DataService/UpdateRowDataHashForHost',
            cdata__pb2.UpdateRowDataHashForHostRequest.SerializeToString,
            cdata__pb2.UpdateRowDataHashForHostResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NotifyHostOfRemovedRow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdata.DataService/NotifyHostOfRemovedRow',
            cdata__pb2.NotifyHostOfRemovedRowRequest.SerializeToString,
            cdata__pb2.NotifyHostOfRemovedRowResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
